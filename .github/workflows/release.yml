name: 🚀 Release Management

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: "Custom release notes (optional)"
        required: false
        type: string

jobs:
  release:
    name: 🚀 Create Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🏷️ Get Current Version
        id: current_version
        run: |
          CURRENT_VERSION=$(python -c "from src.version import __version__; print(__version__)")
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: 🔢 Calculate New Version
        id: new_version
        run: |
          CURRENT="${{ steps.current_version.outputs.current }}"
          TYPE="${{ github.event.inputs.version_type }}"

          IFS='.' read -r major minor patch <<< "$CURRENT"

          case $TYPE in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac

          NEW_VERSION="$major.$minor.$patch"
          echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: 📝 Update Version Files
        run: |
          python tools/update_version.py "${{ steps.new_version.outputs.new }}"

      - name: 📝 Generate Release Notes
        id: release_notes
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new }}"

          if [ -n "${{ github.event.inputs.release_notes }}" ]; then
            echo "${{ github.event.inputs.release_notes }}" > release_notes.md
          else
            echo "## 🕌 QuranBot v$NEW_VERSION" > release_notes.md
            echo "" >> release_notes.md
            echo "### ✨ What's New" >> release_notes.md
            echo "" >> release_notes.md
            echo "- Version bump to $NEW_VERSION" >> release_notes.md
            echo "- Latest improvements and bug fixes" >> release_notes.md
            echo "- Enhanced stability and performance" >> release_notes.md
            echo "" >> release_notes.md
            echo "### 📦 Installation" >> release_notes.md
            echo "" >> release_notes.md
            echo "\`\`\`bash" >> release_notes.md
            echo "git clone https://github.com/trippixn963/QuranBot.git" >> release_notes.md
            echo "cd QuranBot" >> release_notes.md
            echo "git checkout v$NEW_VERSION" >> release_notes.md
            echo "pip install -r requirements.txt" >> release_notes.md
            echo "\`\`\`" >> release_notes.md
            echo "" >> release_notes.md
            echo "### ⚠️ Notice" >> release_notes.md
            echo "This project is provided AS-IS with NO SUPPORT. Use at your own risk." >> release_notes.md
            echo "" >> release_notes.md
            echo "*May Allah (SWT) bless this release and all who use it for the benefit of the Muslim Ummah.*" >> release_notes.md
          fi

      - name: 💾 Commit Version Changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git commit -m "🚀 Release v${{ steps.new_version.outputs.new }}"
          git tag -a "v${{ steps.new_version.outputs.new }}" -m "Release v${{ steps.new_version.outputs.new }}"

      - name: 📤 Push Changes
        run: |
          git push origin master
          git push origin "v${{ steps.new_version.outputs.new }}"

      - name: 🚀 Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.new_version.outputs.new }}
          release_name: 🕌 QuranBot v${{ steps.new_version.outputs.new }}
          body_path: release_notes.md
          draft: false
          prerelease: false

      - name: 📊 Summary
        run: |
          echo "## 🚀 Release Created Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** v${{ steps.new_version.outputs.new }}" >> $GITHUB_STEP_SUMMARY
          echo "**Type:** ${{ github.event.inputs.version_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Previous:** v${{ steps.current_version.outputs.current }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Version files updated" >> $GITHUB_STEP_SUMMARY
          echo "✅ Git tag created" >> $GITHUB_STEP_SUMMARY
          echo "✅ GitHub release published" >> $GITHUB_STEP_SUMMARY
